#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace gullycricket.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Accountancy")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFinancialElementType(FinancialElementType instance);
    partial void UpdateFinancialElementType(FinancialElementType instance);
    partial void DeleteFinancialElementType(FinancialElementType instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertJournalEntry(JournalEntry instance);
    partial void UpdateJournalEntry(JournalEntry instance);
    partial void DeleteJournalEntry(JournalEntry instance);
    partial void InsertTransactiontype(Transactiontype instance);
    partial void UpdateTransactiontype(Transactiontype instance);
    partial void DeleteTransactiontype(Transactiontype instance);
    partial void InsertGeneralJournalEntry(GeneralJournalEntry instance);
    partial void UpdateGeneralJournalEntry(GeneralJournalEntry instance);
    partial void DeleteGeneralJournalEntry(GeneralJournalEntry instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AccountancyConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FinancialElementType> FinancialElementTypes
		{
			get
			{
				return this.GetTable<FinancialElementType>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<JournalEntry> JournalEntries
		{
			get
			{
				return this.GetTable<JournalEntry>();
			}
		}
		
		public System.Data.Linq.Table<Transactiontype> Transactiontypes
		{
			get
			{
				return this.GetTable<Transactiontype>();
			}
		}
		
		public System.Data.Linq.Table<GeneralJournalEntry> GeneralJournalEntries
		{
			get
			{
				return this.GetTable<GeneralJournalEntry>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FinancialElementType")]
	public partial class FinancialElementType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeName;
		
		private EntitySet<JournalEntry> _JournalEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public FinancialElementType()
		{
			this._JournalEntries = new EntitySet<JournalEntry>(new Action<JournalEntry>(this.attach_JournalEntries), new Action<JournalEntry>(this.detach_JournalEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinancialElementType_JournalEntry", Storage="_JournalEntries", ThisKey="Id", OtherKey="ElementTypeId")]
		public EntitySet<JournalEntry> JournalEntries
		{
			get
			{
				return this._JournalEntries;
			}
			set
			{
				this._JournalEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.FinancialElementType = this;
		}
		
		private void detach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.FinancialElementType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _Email;
		
		private string _LoginId;
		
		private string _Password;
		
		private string _ImageURL;
		
		private System.DateTime _RegisteredOn;
		
		private bool _IsVerified;
		
		private EntitySet<GeneralJournalEntry> _GeneralJournalEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoginIdChanging(string value);
    partial void OnLoginIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnRegisteredOnChanging(System.DateTime value);
    partial void OnRegisteredOnChanged();
    partial void OnIsVerifiedChanging(bool value);
    partial void OnIsVerifiedChanged();
    #endregion
		
		public User()
		{
			this._GeneralJournalEntries = new EntitySet<GeneralJournalEntry>(new Action<GeneralJournalEntry>(this.attach_GeneralJournalEntries), new Action<GeneralJournalEntry>(this.detach_GeneralJournalEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LoginId
		{
			get
			{
				return this._LoginId;
			}
			set
			{
				if ((this._LoginId != value))
				{
					this.OnLoginIdChanging(value);
					this.SendPropertyChanging();
					this._LoginId = value;
					this.SendPropertyChanged("LoginId");
					this.OnLoginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageURL", DbType="VarChar(50)")]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisteredOn", DbType="DateTime NOT NULL")]
		public System.DateTime RegisteredOn
		{
			get
			{
				return this._RegisteredOn;
			}
			set
			{
				if ((this._RegisteredOn != value))
				{
					this.OnRegisteredOnChanging(value);
					this.SendPropertyChanging();
					this._RegisteredOn = value;
					this.SendPropertyChanged("RegisteredOn");
					this.OnRegisteredOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVerified", DbType="Bit NOT NULL")]
		public bool IsVerified
		{
			get
			{
				return this._IsVerified;
			}
			set
			{
				if ((this._IsVerified != value))
				{
					this.OnIsVerifiedChanging(value);
					this.SendPropertyChanging();
					this._IsVerified = value;
					this.SendPropertyChanged("IsVerified");
					this.OnIsVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GeneralJournalEntry", Storage="_GeneralJournalEntries", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<GeneralJournalEntry> GeneralJournalEntries
		{
			get
			{
				return this._GeneralJournalEntries;
			}
			set
			{
				this._GeneralJournalEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneralJournalEntries(GeneralJournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GeneralJournalEntries(GeneralJournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JournalEntries")]
	public partial class JournalEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _JournalId;
		
		private int _ElementTypeId;
		
		private int _TransactionTypeId;
		
		private int _Amount;
		
		private EntityRef<FinancialElementType> _FinancialElementType;
		
		private EntityRef<Transactiontype> _Transactiontype;
		
		private EntityRef<GeneralJournalEntry> _GeneralJournalEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJournalIdChanging(int value);
    partial void OnJournalIdChanged();
    partial void OnElementTypeIdChanging(int value);
    partial void OnElementTypeIdChanged();
    partial void OnTransactionTypeIdChanging(int value);
    partial void OnTransactionTypeIdChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public JournalEntry()
		{
			this._FinancialElementType = default(EntityRef<FinancialElementType>);
			this._Transactiontype = default(EntityRef<Transactiontype>);
			this._GeneralJournalEntry = default(EntityRef<GeneralJournalEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JournalId", DbType="Int NOT NULL")]
		public int JournalId
		{
			get
			{
				return this._JournalId;
			}
			set
			{
				if ((this._JournalId != value))
				{
					if (this._GeneralJournalEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJournalIdChanging(value);
					this.SendPropertyChanging();
					this._JournalId = value;
					this.SendPropertyChanged("JournalId");
					this.OnJournalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementTypeId", DbType="Int NOT NULL")]
		public int ElementTypeId
		{
			get
			{
				return this._ElementTypeId;
			}
			set
			{
				if ((this._ElementTypeId != value))
				{
					if (this._FinancialElementType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElementTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ElementTypeId = value;
					this.SendPropertyChanged("ElementTypeId");
					this.OnElementTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionTypeId", DbType="Int NOT NULL")]
		public int TransactionTypeId
		{
			get
			{
				return this._TransactionTypeId;
			}
			set
			{
				if ((this._TransactionTypeId != value))
				{
					if (this._Transactiontype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionTypeId = value;
					this.SendPropertyChanged("TransactionTypeId");
					this.OnTransactionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinancialElementType_JournalEntry", Storage="_FinancialElementType", ThisKey="ElementTypeId", OtherKey="Id", IsForeignKey=true)]
		public FinancialElementType FinancialElementType
		{
			get
			{
				return this._FinancialElementType.Entity;
			}
			set
			{
				FinancialElementType previousValue = this._FinancialElementType.Entity;
				if (((previousValue != value) 
							|| (this._FinancialElementType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinancialElementType.Entity = null;
						previousValue.JournalEntries.Remove(this);
					}
					this._FinancialElementType.Entity = value;
					if ((value != null))
					{
						value.JournalEntries.Add(this);
						this._ElementTypeId = value.Id;
					}
					else
					{
						this._ElementTypeId = default(int);
					}
					this.SendPropertyChanged("FinancialElementType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transactiontype_JournalEntry", Storage="_Transactiontype", ThisKey="TransactionTypeId", OtherKey="Id", IsForeignKey=true)]
		public Transactiontype Transactiontype
		{
			get
			{
				return this._Transactiontype.Entity;
			}
			set
			{
				Transactiontype previousValue = this._Transactiontype.Entity;
				if (((previousValue != value) 
							|| (this._Transactiontype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transactiontype.Entity = null;
						previousValue.JournalEntries.Remove(this);
					}
					this._Transactiontype.Entity = value;
					if ((value != null))
					{
						value.JournalEntries.Add(this);
						this._TransactionTypeId = value.Id;
					}
					else
					{
						this._TransactionTypeId = default(int);
					}
					this.SendPropertyChanged("Transactiontype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralJournalEntry_JournalEntry", Storage="_GeneralJournalEntry", ThisKey="JournalId", OtherKey="Id", IsForeignKey=true)]
		public GeneralJournalEntry GeneralJournalEntry
		{
			get
			{
				return this._GeneralJournalEntry.Entity;
			}
			set
			{
				GeneralJournalEntry previousValue = this._GeneralJournalEntry.Entity;
				if (((previousValue != value) 
							|| (this._GeneralJournalEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneralJournalEntry.Entity = null;
						previousValue.JournalEntries.Remove(this);
					}
					this._GeneralJournalEntry.Entity = value;
					if ((value != null))
					{
						value.JournalEntries.Add(this);
						this._JournalId = value.Id;
					}
					else
					{
						this._JournalId = default(int);
					}
					this.SendPropertyChanged("GeneralJournalEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactiontype")]
	public partial class Transactiontype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeName;
		
		private EntitySet<JournalEntry> _JournalEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public Transactiontype()
		{
			this._JournalEntries = new EntitySet<JournalEntry>(new Action<JournalEntry>(this.attach_JournalEntries), new Action<JournalEntry>(this.detach_JournalEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transactiontype_JournalEntry", Storage="_JournalEntries", ThisKey="Id", OtherKey="TransactionTypeId")]
		public EntitySet<JournalEntry> JournalEntries
		{
			get
			{
				return this._JournalEntries;
			}
			set
			{
				this._JournalEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.Transactiontype = this;
		}
		
		private void detach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.Transactiontype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeneralJournalEntries")]
	public partial class GeneralJournalEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private System.DateTime _TransactionDate;
		
		private EntitySet<JournalEntry> _JournalEntries;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    #endregion
		
		public GeneralJournalEntry()
		{
			this._JournalEntries = new EntitySet<JournalEntry>(new Action<JournalEntry>(this.attach_JournalEntries), new Action<JournalEntry>(this.detach_JournalEntries));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeneralJournalEntry_JournalEntry", Storage="_JournalEntries", ThisKey="Id", OtherKey="JournalId")]
		public EntitySet<JournalEntry> JournalEntries
		{
			get
			{
				return this._JournalEntries;
			}
			set
			{
				this._JournalEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GeneralJournalEntry", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GeneralJournalEntries.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GeneralJournalEntries.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.GeneralJournalEntry = this;
		}
		
		private void detach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.GeneralJournalEntry = null;
		}
	}
}
#pragma warning restore 1591
